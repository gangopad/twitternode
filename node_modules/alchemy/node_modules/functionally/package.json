{
  "name": "functionally",
  "version": "0.2.1",
  "description": "Functionally\r ============",
  "main": "index.js",
  "scripts": {
    "build": "browserify index.js -s F -o dist/F.js",
    "test": "make test",
    "test-w": "make test-w",
    "test-debug": "mocha --debug-brk"
  },
  "author": {
    "name": "Radu Brehar"
  },
  "license": "MIT",
  "devDependencies": {
    "mocha": "~1.21.0",
    "should": "~4.0.4"
  },
  "readme": "Functionally\r\n============\r\n\r\nUsage\r\n```\r\nnpm install functionally\r\n```\r\n\r\n```js\r\nvar F = require('functionally')\r\n\r\nfunction log(msg){\r\n    console.log(msg)\r\n}\r\n\r\nfunction greet(name){\r\n    return 'Hello ' + name + '!'\r\n}\r\n\r\nvar logGreeting = F.compose(log, greet)\r\n\r\nlogGreeting('Bob') //console.log('Hello Bob!')\r\n\r\n```\r\n\r\n## find(fn, target)\r\n\r\nReturns the first object in target for which fn returns a truthy value.\r\n\r\nExample\r\n\r\n```js\r\nF.find(function(obj){\r\n    return obj.name == 'js'\r\n}, [\r\n    {name: 'ruby'},\r\n    {name: 'js'},\r\n    {name: 'php'},\r\n    {name: 'erlang'}\r\n])\r\n//returns the second object in the array\r\n```\r\n\r\nThe ```find``` function is curried, so you can do\r\n```js\r\nvar findFirst = F.find(function(value, index, target){\r\n    if (index === 0){\r\n        return value\r\n    }\r\n})\r\n\r\nfindFirst([4,5,6]) == 4\r\n```\r\n\r\n## once(fn)\r\n\r\nReturns a function that calls fn just once.\r\n\r\nExample\r\n\r\n```js\r\nvar counter = 0\r\n\r\nvar inc = F.once(function(){\r\n    counter++\r\n})\r\n\r\ninc()\r\ncounter == 1\r\n\r\ninc()\r\ninc()\r\n\r\ncounter == 1\r\n```\r\n\r\nThe function returned by once returns the result of the original function. On subsequent calls, returns the same result.\r\n\r\n",
  "readmeFilename": "README.md",
  "_id": "functionally@0.2.1",
  "dist": {
    "shasum": "e54b8ae6ed09851557e702bb6edaa1dbd1cf8be3"
  },
  "_from": "functionally@^0.2.1",
  "_resolved": "https://registry.npmjs.org/functionally/-/functionally-0.2.1.tgz"
}
